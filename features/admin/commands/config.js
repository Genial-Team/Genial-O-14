const { SlashCommandBuilder, EmbedBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ModalBuilder,ButtonStyle,
    ButtonBuilder, ChannelType, PermissionFlagsBits, StringSelectMenuBuilder, StringSelectMenuOptionBuilder,
    ChannelSelectMenuBuilder
} = require("discord.js");
const getServerConfig = require("../../../modules/getServerConfig");
const formatWelcomeText = require("../../../modules/formatWelcomeText");
const sendAlertToLogChannel = require("../../../modules/sendAlertToLogChannel");
module.exports = {
    config: {
        name: "config",
        active: true,
        canBeUsedOnDM: false,
    },
    initCommand: () => {
      return new SlashCommandBuilder()
          .setName("config")
          .setDescription("üõ†Ô∏è | configure les journaux que le Bot enverra")
    },
    execute: async function(interaction) {
        const serverConfig = await getServerConfig(interaction.guild.id);

        const guildData = {
            logChannel: serverConfig ? serverConfig.logChannel : "non configur√©",
            welcomeMessageText: serverConfig ? serverConfig.welcomeText : "non configur√©",
            logMessage : serverConfig ? serverConfig.syslog.messageDelete :"non configur√©",
            banAdd : serverConfig ? serverConfig.syslog.banAdd : "non configur√©",
            banRemove : serverConfig ? serverConfig.syslog.banRemove : "non configur√©",
        }


        if ( !serverConfig || !serverConfig.guildID) {

        }

        const configurationEmbed = new EmbedBuilder()
            .setTitle(`üõ†Ô∏è | configuration des journaux`)
            .setFields(
                {
                    name: "üìù | salon de log & r√¥le muet",
                    value: guildData.logChannel ? `${await interaction.guild.channels.fetch(guildData.logChannel)} & ${await interaction.guild.roles.fetch(serverConfig.muteID)}` : "non configur√©"
                },
                {
                    name: ":wave:  | message de bienvenue",
                    value: formatWelcomeText(guildData.welcomeMessageText, interaction.member)
                },
                {
                    name: ":pencil: | message supprim√©",
                    value: guildData.logMessage ? "pr√™t" : "non configur√© / d√©sactiv√©"
                },
                {
                    name: ":no_entry_sign: | ban enregistr√©",
                    value: guildData.banAdd ? "pr√™t" : "non configur√© / d√©sactiv√©"
                },
                {
                    name: ":arrows_counterclockwise: | ban r√©voqu√©",
                    value: guildData.banRemove ? "pr√™t" : "non configur√© / d√©sactiv√©"
                }
            )
            .setColor(colorScheme.default.info)
            .setFooter({text: interaction.member.user.username, iconURL: interaction.member.avatarURL()})

        const navigationSelect = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config:navbar')
                    .setPlaceholder('que veux-tu configurer ?')
                    .addOptions(
                        new StringSelectMenuOptionBuilder()
                            .setLabel('historique des messages')
                            .setDescription('les messages supprim√©s pourront √™tre sauvegard√©s')
                            .setValue('messageDelete'),
                        new StringSelectMenuOptionBuilder()
                            .setLabel("le message d'accueil")
                            .setDescription("un message sera envoy√© pour l'accueillir le membre")
                            .setValue('welcomeChannel'),
                        new StringSelectMenuOptionBuilder()
                            .setLabel('les bans cr√©ent/r√©voqu√©')
                            .setDescription('les bans / d√©bans serons sauvegarder par le bot')
                            .setValue('bans'),
                    )
            );

        await interaction.reply({
            ephemeral: true,
            embeds: [configurationEmbed],
            components: [navigationSelect]
        })

    },
    async buttonResponse(interaction) {
        const serverConfig = await getServerConfig(interaction.guild.id);

        if ( !serverConfig ) return interaction.reply({content: error.fr.configError.serverMustBeConfigured, ephemeral: true})

        console.log(interaction)



        switch (interaction.customId) {
            case "config:navbar" :

                switch (interaction.values[0]) {
                    case "messageDelete":

                        await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                            $set: {
                                syslog: {
                                    messageDelete: !serverConfig.syslog.messageDelete,
                                    banAdd: serverConfig.syslog.banAdd,
                                    banRemove: serverConfig.syslog.banRemove,
                                }
                            }
                        })

                        await sendAlertToLogChannel(
                            `la sauvegarde des messages supprim√©s a √©t√© ${!serverConfig.syslog.messageDelete ? "activ√©" : "d√©sactiv√©"} par ${interaction.member}`,
                            interaction,
                            serverConfig.logChannel
                        )

                        interaction.reply({
                            content: `les messages supprim√© ${
                                !serverConfig.syslog.messageDelete
                                    ? `serons sauvegard√© dans ${await interaction.guild.channels.fetch(serverConfig.logChannel)}`
                                    : `ne serons plus sauvegard√©`
                            }`,
                            ephemeral: true
                        })
                        break;
                    case "welcomeChannel":

                        if ( serverConfig.wChannel ) {
                            await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                                $set: {
                                    wChannel: null
                                }
                            })
                            interaction.reply({
                                content: "le message d'accueil √† √©t√© d√©sactiv√©",
                                ephemeral: true
                            })
                        } else {
                            const navigationSelect = new ActionRowBuilder()
                                .addComponents(
                                    new ChannelSelectMenuBuilder()
                                        .setPlaceholder("o√π devrais-je envoyer le message ?")
                                        .setCustomId('config:welcomeChannel')
                                        .setChannelTypes(ChannelType.GuildText)
                                        .setMaxValues(1)
                                        .setMinValues(1)
                                )

                            interaction.reply({
                                content: "s√©lectionne le salon o√π je devrais envoyer le message d'accueil parmi la liste ci-dessous",
                                components: [navigationSelect],
                                ephemeral: true
                            })
                        }


                        break;
                    case "bans":

                        await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                            $set: {
                                syslog: {
                                    messageDelete: serverConfig.syslog.messageDelete,
                                    banAdd: !serverConfig.syslog.banAdd,
                                    banRemove: !serverConfig.syslog.banRemove,
                                }
                            }
                        })

                        await sendAlertToLogChannel(
                            `les notifications de bannissement / annulation de bannissement ont √©t√© ${!serverConfig.syslog.banAdd ? "activ√©" : "d√©sactiv√©"} par ${interaction.member}`,
                            interaction,
                            serverConfig.logChannel
                        )

                        interaction.reply({
                            content: `les notifications de bannissement / annulation de bannissement ${
                                !serverConfig.syslog.messageDelete
                                    ? `serons envoy√© dans ${await interaction.guild.channels.fetch(serverConfig.logChannel)}`
                                    : `ne serons plus envoy√©`
                            }`,
                            ephemeral: true
                        })
                        break;
                    default:
                        console.log(interaction.value)
                        interaction.reply({
                            content: error.fr.commandError.noArgumentFound,
                            ephemeral: true
                        })
                        break;
                }

                break;
            case "config:welcomeChannel":

                /**
                 * TODO: finir le message d'accueil au complet
                 */
                const newWelcomeChannelId = interaction.values[0];

                await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                    $set: {
                        wChannel: newWelcomeChannelId.toString()
                    }
                })

                await sendAlertToLogChannel(
                    `le message d'accueil a √©t√© activ√© et le salon d'envoi a √©t√© d√©fini sur ${await interaction.guild.channels.fetch(newWelcomeChannelId) } par ${interaction.member}`,
                    interaction,
                    serverConfig.logChannel
                )

                interaction.reply({
                    content: `le message d'accueil a √©t√© activ√© et le salon d'envoi a √©t√© d√©fini sur ${await interaction.guild.channels.fetch(newWelcomeChannelId) }`,
                    ephemeral: true
                })

                break;
        }


    }
}