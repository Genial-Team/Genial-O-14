const { SlashCommandBuilder, EmbedBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ModalBuilder,ButtonStyle,
    ButtonBuilder, ChannelType, PermissionFlagsBits, StringSelectMenuBuilder, StringSelectMenuOptionBuilder
} = require("discord.js");
const getServerConfig = require("../../../modules/getServerConfig");
const formatWelcomeText = require("../../../modules/formatWelcomeText")
module.exports = {
    config: {
        name: "config",
        active: true,
        canBeUsedOnDM: false,
    },
    initCommand: () => {
      return new SlashCommandBuilder()
          .setName("config")
          .setDescription("üõ†Ô∏è | configure les journaux que le Bot enverra")
    },
    execute: async function(interaction) {
        const serverConfig = await getServerConfig(interaction.guild.id);

        const guildData = {
            logChannel: serverConfig ? serverConfig.logChannel : "non configur√©",
            welcomeMessageText: serverConfig ? serverConfig.welcomeText : "non configur√©",
            logMessage : serverConfig ? serverConfig.syslog.messageDelete :"non configur√©",
            banAdd : serverConfig ? serverConfig.syslog.banAdd : "non configur√©",
            banRemove : serverConfig ? serverConfig.syslog.banRemove : "non configur√©",
        }


        if ( !serverConfig || !serverConfig.guildID) {

        }

        const configurationEmbed = new EmbedBuilder()
            .setTitle(`üõ†Ô∏è | configuration des journaux`)
            .setFields(
                {
                    name: "üìù | salon de log & r√¥le muet",
                    value: guildData.logChannel ? `${await interaction.guild.channels.fetch(guildData.logChannel)} & ${await interaction.guild.roles.fetch(serverConfig.muteID)}` : "non configur√©"
                },
                {
                    name: ":wave:  | message de bienvenue",
                    value: formatWelcomeText(guildData.welcomeMessageText, interaction.member)
                },
                {
                    name: ":pencil: | message supprim√©",
                    value: guildData.logMessage ? "‚úÖpr√™t" : "‚õînon configur√©"
                },
                {
                    name: ":no_entry_sign: | ban enregistr√©",
                    value: guildData.banAdd ? "‚úÖpr√™t" : "‚õînon configur√©"
                },
                {
                    name: ":arrows_counterclockwise: | ban r√©voqu√©",
                    value: guildData.banRemove ? "‚úÖpr√™t" : "‚õînon configur√©"
                }
            )
            .setColor(colorScheme.default.info)
            .setFooter({text: interaction.member.user.username, iconURL: interaction.member.avatarURL()})

        const navigationSelect = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config:navbar:'+ interaction.guild.id)
                    .setPlaceholder('que veux-tu configurer ?')
                    .addOptions(
                        new StringSelectMenuOptionBuilder()
                            .setLabel('historique des messages')
                            .setDescription('les messages supprim√©s pourront √™tre sauvegard√©s')
                            .setValue('messageDelete'),
                        new StringSelectMenuOptionBuilder()
                            .setLabel("le message d'accueil")
                            .setDescription("un message sera envoy√© pour l'accueillir le membre")
                            .setValue('welcomeText'),
                        new StringSelectMenuOptionBuilder()
                            .setLabel('les bans cr√©ent/r√©voqu√©')
                            .setDescription('les bans / d√©bans serons sauvegarder par le bot')
                            .setValue('bans'),
                    )
            );

        await interaction.reply({
            ephemeral: true,
            embeds: [configurationEmbed],
            components: [navigationSelect]
        })

    },
    async buttonResponse(interaction) {
        const serverConfig = await getServerConfig(interaction.guild.id);

        if ( !serverConfig ) return interaction.reply({content: error.fr.configError.serverMustBeConfigured, ephemeral: true})

        switch (interaction.values[0]) {
            case "messageDelete":

                await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                    $set: {
                        syslog: {
                            messageDelete: !serverConfig.syslog.messageDelete,
                            banAdd: serverConfig.syslog.banAdd,
                            banRemove: serverConfig.syslog.banRemove,
                        }
                    }
                })

                await interaction.guild.channels.fetch(serverConfig.logChannel).send({
                    embeds:[
                        new EmbedBuilder()
                            .setColor(colorScheme.default.info)
                            .setFooter({text: interaction.member.user.username, iconURL: interaction.member.avatarURL()})
                            .setDescription(`${interaction.member} a **${ !serverConfig.syslog.messageDelete ? "activ√©" : "d√©sactiv√©" }** la sauvegarde des messages supprim√©`)
                    ]
                })

                interaction.reply({
                    content: `les messages supprim√© ${
                        !serverConfig.syslog.messageDelete
                            ? `serons sauvegard√© dans ${await interaction.guild.channels.fetch(serverConfig.logChannel)}`
                            : `ne serons plus sauvegard√©`
                    }`,
                    ephemeral: true
                })
                break;
            case "welcomeText":
                interaction.reply({
                    content: "welcome text",
                    ephemeral: true
                })
                break;
            case "bans":
                interaction.reply({
                    content: "bans",
                    ephemeral: true
                })
                break;
            default:
                console.log(interaction.value)
                interaction.reply({
                    content: error.fr.commandError.noArgumentFound,
                    ephemeral: true
                })
                break;
        }
    }
}