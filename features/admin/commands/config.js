const { SlashCommandBuilder, EmbedBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ModalBuilder,ButtonStyle,
    ButtonBuilder, ChannelType, PermissionFlagsBits, StringSelectMenuBuilder, StringSelectMenuOptionBuilder,
    ChannelSelectMenuBuilder
} = require("discord.js");

const getServerConfig = require("../../../modules/getServerConfig");
const formatWelcomeText = require("../../../modules/formatWelcomeText");
const sendAlertToLogChannel = require("../../../modules/sendAlertToLogChannel");
const canExecuteAdminCommand = require("../../../modules/canExecuteAdminCommand");

module.exports = {
    config: {
        name: "config",
        active: true,
        canBeUsedOnDM: false,
    },
    initCommand: () => {
      return new SlashCommandBuilder()
          .setName("config")
          .setDescription("üõ†Ô∏è | configure les journaux que le Bot enverra")
    },
    execute: async function(interaction) {

        if ( !canExecuteAdminCommand ) return interaction.reply({
            content: error.fr.permissions.dontHaveAdminPermission,
            ephemeral: true
        })

        const serverConfig = await getServerConfig(interaction.guild.id);

        const guildData = {
            logChannel: serverConfig ? serverConfig.logChannel : "non configur√©",
            welcomeMessageText: serverConfig ? serverConfig.welcomeText : "non configur√©",
            logMessage : serverConfig ? serverConfig.syslog.messageDelete :"non configur√©",
            banAdd : serverConfig ? serverConfig.syslog.banAdd : "non configur√©",
            banRemove : serverConfig ? serverConfig.syslog.banRemove : "non configur√©",
        }

        const configurationEmbed = new EmbedBuilder()
            .setTitle(`üõ†Ô∏è | configuration des journaux`)
            .setFields(
                {
                    name: "üìù | salon de log & r√¥le muet",
                    value: guildData.logChannel ? `${await interaction.guild.channels.fetch(guildData.logChannel)} & ${await interaction.guild.roles.fetch(serverConfig.muteID)}` : "non configur√©"
                },
                {
                    name: ":wave:  | message de bienvenue",
                    value: formatWelcomeText(guildData.welcomeMessageText, interaction.member)
                },
                {
                    name: ":pencil: | message supprim√©",
                    value: guildData.logMessage ? "pr√™t" : "non configur√© / d√©sactiv√©"
                },
                {
                    name: ":no_entry_sign: | ban enregistr√©",
                    value: guildData.banAdd ? "pr√™t" : "non configur√© / d√©sactiv√©"
                },
                {
                    name: ":arrows_counterclockwise: | ban r√©voqu√©",
                    value: guildData.banRemove ? "pr√™t" : "non configur√© / d√©sactiv√©"
                }
            )
            .setColor(colorScheme.default.info)
            .setFooter({text: interaction.member.user.username, iconURL: interaction.member.avatarURL()})

        const navigationSelect = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config:navbar')
                    .setPlaceholder('que veux-tu configurer ?')
                    .addOptions(
                        new StringSelectMenuOptionBuilder()
                            .setLabel('historique des messages')
                            .setDescription('les messages supprim√©s pourront √™tre sauvegard√©s')
                            .setValue('messageDelete'),
                        new StringSelectMenuOptionBuilder()
                            .setLabel("le salon du message d'accueil")
                            .setDescription("un message sera envoy√© pour l'accueillir le membre")
                            .setValue('welcomeChannel'),
                        new StringSelectMenuOptionBuilder()
                            .setLabel("le contenu du message d'accueil")
                            .setDescription("le contenu du message d'accueil")
                            .setValue("welcomeMessage"),
                        new StringSelectMenuOptionBuilder()
                            .setLabel('les bans cr√©ent/r√©voqu√©')
                            .setDescription('les bans / d√©bans serons sauvegarder par le bot')
                            .setValue('bans'),
                    )
            );
        await interaction.reply({
            ephemeral: true,
            embeds: [configurationEmbed],
            components: [navigationSelect]
        })

    },
    async buttonResponse(interaction) {

        const serverConfig = await getServerConfig(interaction.guild.id);

        if ( !serverConfig ) return interaction.update({
            content: error.fr.configError.serverMustBeConfigured,
            embeds:[],
            components:[],
            ephemeral: true
        })


        switch (interaction.customId) {
            case "config:navbar" :
                switch (interaction.values[0]) {
                    case "messageDelete":

                        await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                            $set: {
                                syslog: {
                                    messageDelete: !serverConfig.syslog.messageDelete,
                                    banAdd: serverConfig.syslog.banAdd,
                                    banRemove: serverConfig.syslog.banRemove,
                                }
                            }
                        })

                        await sendAlertToLogChannel(
                            `la sauvegarde des messages supprim√©s a √©t√© ${!serverConfig.syslog.messageDelete ? "activ√©" : "d√©sactiv√©"} par ${interaction.member}`,
                            interaction,
                            serverConfig.logChannel
                        )

                        interaction.update({
                            content: `les messages supprim√© ${
                                !serverConfig.syslog.messageDelete
                                    ? `serons sauvegard√© dans ${await interaction.guild.channels.fetch(serverConfig.logChannel)}`
                                    : `ne serons plus sauvegard√©`
                            }`,
                            embeds:[],
                            components:[],
                            ephemeral: true
                        })
                        break;
                    case "welcomeChannel":

                        if ( serverConfig.wChannel ) {
                            await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                                $set: {
                                    wChannel: null
                                }
                            })

                            await sendAlertToLogChannel(
                                `le message d'accueil a √©t√© d√©sactiv√© par ${interaction.member}`,
                                interaction,
                                serverConfig.logChannel
                            )

                            interaction.update({
                                content: "le message d'accueil √† √©t√© d√©sactiv√©",
                                embeds:[],
                                components: [],
                                ephemeral: true
                            })

                        } else {
                            const navigationSelect = new ActionRowBuilder()
                                .addComponents(
                                    new ChannelSelectMenuBuilder()
                                        .setPlaceholder("o√π devrais-je envoyer le message ?")
                                        .setCustomId('config:welcomeChannel:select')
                                        .setChannelTypes(ChannelType.GuildText)
                                        .setMaxValues(1)
                                        .setMinValues(1)
                                )

                            interaction.update({
                                content: "s√©lectionne le salon o√π je devrais envoyer le message d'accueil parmi la liste ci-dessous",
                                embeds:[],
                                components: [navigationSelect],
                                ephemeral: true
                            })
                        }
                        break;
                    case "welcomeMessage":
                        /**
                         *             .replaceAll("{guild.count}", member.guild.memberCount)
                         * @type {EmbedBuilder}
                         */
                        const exempleEmbed = new EmbedBuilder()
                            .setTitle("option et r√®gle du message d'accueil")
                            .setDescription("votre message ne doit pas contenir plus de 1024 caract√®res, mais vous trouverai ci-dessous des option pour formater votre texte")
                            .addFields({
                                name:"{mention}",
                                value: `mentionne le nouveau membre l√† ou vous le souhaitez (exemple: ${interaction.member})`
                            },{
                                name:"{server}",
                                value: `int√®gre le nom du server l√† ou vous le souhaitez (exemple: ${interaction.guild.name})`
                            },{
                                name:"{pseudo}",
                                value: `int√®gre le nom du nouveau membre l√† ou vous le souhaitez (exemple: ${interaction.member.user.username})`
                            },{
                                name: "{compteur}",
                                value: `int√®gre le nombre de membre sur le serveur l√† ou vous le souhaitez (exemple: ${interaction.guild.memberCount})`
                            })
                            .setColor(colorScheme.default.info)
                            .setFooter({text: interaction.member.user.username, iconURL: interaction.member.avatarURL()})

                        const actionRow = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId("config:welcomeMessage:true")
                                    .setLabel("Oui, je souhaite continuer")
                                    .setStyle(ButtonStyle.Primary),
                                new ButtonBuilder()
                                    .setCustomId("config:welcomeMessage:false")
                                    .setLabel("Non, je ne souhaite pas continuer")
                                    .setStyle(ButtonStyle.Danger)
                            )

                        interaction.update({
                            content: "",
                            embeds: [exempleEmbed],
                            components: [actionRow],
                            ephemeral: true,
                        })

                        break;
                    case "bans":

                        await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                            $set: {
                                syslog: {
                                    messageDelete: serverConfig.syslog.messageDelete,
                                    banAdd: !serverConfig.syslog.banAdd,
                                    banRemove: !serverConfig.syslog.banRemove,
                                }
                            }
                        })

                        await sendAlertToLogChannel(
                            `les notifications de bannissement / annulation de bannissement ont √©t√© ${!serverConfig.syslog.banAdd ? "activ√©" : "d√©sactiv√©"} par ${interaction.member}`,
                            interaction,
                            serverConfig.logChannel
                        )

                        interaction.update({
                            content: `les notifications de bannissement / annulation de bannissement ${
                                !serverConfig.syslog.banAdd
                                    ? `serons envoy√© dans ${await interaction.guild.channels.fetch(serverConfig.logChannel)}`
                                    : `ne serons plus envoy√©`
                            }`,
                            embeds:[],
                            components:[],
                            ephemeral: true
                        })
                        break;
                    default:
                        console.log(interaction.value)
                        interaction.update({
                            content: error.fr.commandError.noArgumentFound,
                            embeds:[],
                            components:[],
                            ephemeral: true
                        })
                        break;
                }
                break;
            case "config:welcomeMessage:true":
                const contentInputModal = new TextInputBuilder()
                    .setCustomId(`config:welcomeMessage:content`)
                    .setPlaceholder("Bienvenue √† toi {mention}")
                    .setLabel("contenu du message")
                    .setRequired(true)
                    .setStyle(TextInputStyle.Paragraph);

                const contentModal = new ModalBuilder()
                    .setTitle("message de bienvenue")
                    .setCustomId("config:welcomeMessage:modal")

                contentModal.addComponents( new ActionRowBuilder().addComponents(contentInputModal) )

                await interaction.showModal(contentModal)
                break;
            case "config:welcomeMessage:false":
                interaction.update({
                    content: "modification annul√©",
                    embeds:[],
                    components:[],
                    ephemeral: true,
                })
                break;
            case "config:welcomeChannel:select":

                const newWelcomeChannelId = interaction.values[0];

                await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
                    $set: {
                        wChannel: newWelcomeChannelId.toString()
                    }
                })

                await sendAlertToLogChannel(
                    `le message d'accueil a √©t√© activ√© et le salon d'envoi a √©t√© d√©fini sur ${await interaction.guild.channels.fetch(newWelcomeChannelId) } par ${interaction.member}`,
                    interaction,
                    serverConfig.logChannel
                )
                /**
                 * TODO: termin√© de supprim√© le message temporaire
                 */

                await interaction.update({
                    content: `le message d'accueil a √©t√© activ√© et le salon d'envoi a √©t√© d√©fini sur ${await interaction.guild.channels.fetch(newWelcomeChannelId) }`,
                    embeds:[],
                    components:[],
                    ephemeral: true
                })
                break;
        }


    },
    modalResponse: async function(interaction, modalData) {

        if ( !modalData.fields[0].value ) return interaction.reply({ content: error.fr.commandError.noArgumentFound, ephemeral: true });
        const serverConfig = await getServerConfig(interaction.guild.id);


        const embed = new EmbedBuilder()
            .setTitle("confirmation de mise √† jours du message d'accueil")
            .addFields({
                name:"le message de bienvenue √† √©t√© definis sur",
                value: modalData.fields[0].value.toString()
            })
            .setColor(colorScheme.default.success)
            .setFooter({text: interaction.member.user.username, iconURL: interaction.member.displayAvatarURL()})
            .setTimestamp();

        await dataBase.Guild.findOneAndUpdate({guildID: interaction.guild.id}, {
            $set: {
                welcomeText: modalData.fields[0].value
            }
        })

        await sendAlertToLogChannel(
            `${interaction.member} √† remplacer le message de bienvenue par \n ${modalData.fields[0].value} `,
            interaction,
            serverConfig.logChannel
        )

        interaction.update({ embeds: [embed], components: [], ephemeral: true })
    }
}